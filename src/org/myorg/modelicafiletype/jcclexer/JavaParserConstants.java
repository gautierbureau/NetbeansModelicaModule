/* Generated By:JavaCC: Do not edit this line. JavaParserConstants.java */
package org.myorg.modelicafiletype.jcclexer;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 4;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 5;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int ABSTRACT = 8;
  /** RegularExpression Id. */
  int ASSERT = 9;
  /** RegularExpression Id. */
  int BOOLEAN = 10;
  /** RegularExpression Id. */
  int BREAK = 11;
  /** RegularExpression Id. */
  int BYTE = 12;
  /** RegularExpression Id. */
  int CASE = 13;
  /** RegularExpression Id. */
  int CATCH = 14;
  /** RegularExpression Id. */
  int CHAR = 15;
  /** RegularExpression Id. */
  int CLASS = 16;
  /** RegularExpression Id. */
  int CONST = 17;
  /** RegularExpression Id. */
  int CONTINUE = 18;
  /** RegularExpression Id. */
  int _DEFAULT = 19;
  /** RegularExpression Id. */
  int DO = 20;
  /** RegularExpression Id. */
  int DOUBLE = 21;
  /** RegularExpression Id. */
  int ELSE = 22;
  /** RegularExpression Id. */
  int ENUM = 23;
  /** RegularExpression Id. */
  int EXTENDS = 24;
  /** RegularExpression Id. */
  int FALSE = 25;
  /** RegularExpression Id. */
  int FINAL = 26;
  /** RegularExpression Id. */
  int FINALLY = 27;
  /** RegularExpression Id. */
  int FLOAT = 28;
  /** RegularExpression Id. */
  int FOR = 29;
  /** RegularExpression Id. */
  int GOTO = 30;
  /** RegularExpression Id. */
  int IF = 31;
  /** RegularExpression Id. */
  int IMPLEMENTS = 32;
  /** RegularExpression Id. */
  int IMPORT = 33;
  /** RegularExpression Id. */
  int INSTANCEOF = 34;
  /** RegularExpression Id. */
  int INT = 35;
  /** RegularExpression Id. */
  int INTERFACE = 36;
  /** RegularExpression Id. */
  int LONG = 37;
  /** RegularExpression Id. */
  int NATIVE = 38;
  /** RegularExpression Id. */
  int NEW = 39;
  /** RegularExpression Id. */
  int NULL = 40;
  /** RegularExpression Id. */
  int PACKAGE = 41;
  /** RegularExpression Id. */
  int PRIVATE = 42;
  /** RegularExpression Id. */
  int PROTECTED = 43;
  /** RegularExpression Id. */
  int PUBLIC = 44;
  /** RegularExpression Id. */
  int RETURN = 45;
  /** RegularExpression Id. */
  int SHORT = 46;
  /** RegularExpression Id. */
  int STATIC = 47;
  /** RegularExpression Id. */
  int STRICTFP = 48;
  /** RegularExpression Id. */
  int SUPER = 49;
  /** RegularExpression Id. */
  int SWITCH = 50;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 51;
  /** RegularExpression Id. */
  int THIS = 52;
  /** RegularExpression Id. */
  int THROW = 53;
  /** RegularExpression Id. */
  int THROWS = 54;
  /** RegularExpression Id. */
  int TRANSIENT = 55;
  /** RegularExpression Id. */
  int TRUE = 56;
  /** RegularExpression Id. */
  int TRY = 57;
  /** RegularExpression Id. */
  int VOID = 58;
  /** RegularExpression Id. */
  int VOLATILE = 59;
  /** RegularExpression Id. */
  int WHILE = 60;
  /** RegularExpression Id. */
  int WITHIN = 61;
  /** RegularExpression Id. */
  int ENCAPSULATED = 62;
  /** RegularExpression Id. */
  int FUNCTION = 63;
  /** RegularExpression Id. */
  int INPUT = 64;
  /** RegularExpression Id. */
  int END = 65;
  /** RegularExpression Id. */
  int EXTERNAL = 66;
  /** RegularExpression Id. */
  int PARAMETER = 67;
  /** RegularExpression Id. */
  int EQUATION = 68;
  /** RegularExpression Id. */
  int STRING = 69;
  /** RegularExpression Id. */
  int REAL = 70;
  /** RegularExpression Id. */
  int BOOLEAN_MAJ = 71;
  /** RegularExpression Id. */
  int ENUMERATION = 72;
  /** RegularExpression Id. */
  int TYPE = 73;
  /** RegularExpression Id. */
  int THEN = 74;
  /** RegularExpression Id. */
  int WHEN = 75;
  /** RegularExpression Id. */
  int ELSEWHEN = 76;
  /** RegularExpression Id. */
  int OR = 77;
  /** RegularExpression Id. */
  int AND = 78;
  /** RegularExpression Id. */
  int MODEL = 79;
  /** RegularExpression Id. */
  int REDECLARE = 80;
  /** RegularExpression Id. */
  int CONSTANT = 81;
  /** RegularExpression Id. */
  int COMPLEX = 82;
  /** RegularExpression Id. */
  int NOEVENT = 83;
  /** RegularExpression Id. */
  int PRE = 84;
  /** RegularExpression Id. */
  int LOGEVENT = 85;
  /** RegularExpression Id. */
  int CONJ = 86;
  /** RegularExpression Id. */
  int REALFUNC = 87;
  /** RegularExpression Id. */
  int IMAG = 88;
  /** RegularExpression Id. */
  int SIN = 89;
  /** RegularExpression Id. */
  int COS = 90;
  /** RegularExpression Id. */
  int TAN = 91;
  /** RegularExpression Id. */
  int ATAN = 92;
  /** RegularExpression Id. */
  int CONNECTOR = 93;
  /** RegularExpression Id. */
  int ICON = 94;
  /** RegularExpression Id. */
  int RECTANGLE = 95;
  /** RegularExpression Id. */
  int INTEGER = 96;
  /** RegularExpression Id. */
  int RECORD = 97;
  /** RegularExpression Id. */
  int DISCRETE = 98;
  /** RegularExpression Id. */
  int ALGORITHM = 99;
  /** RegularExpression Id. */
  int CONSTRAINEDBY = 100;
  /** RegularExpression Id. */
  int EXPANDABLE = 101;
  /** RegularExpression Id. */
  int FLOW = 102;
  /** RegularExpression Id. */
  int INITIAL = 103;
  /** RegularExpression Id. */
  int NOT = 104;
  /** RegularExpression Id. */
  int DER = 105;
  /** RegularExpression Id. */
  int INNER = 106;
  /** RegularExpression Id. */
  int PARTIAL = 107;
  /** RegularExpression Id. */
  int REPACEABLE = 108;
  /** RegularExpression Id. */
  int ANNOTATION = 109;
  /** RegularExpression Id. */
  int CONNECT = 110;
  /** RegularExpression Id. */
  int OUTER = 111;
  /** RegularExpression Id. */
  int OUTPUT = 112;
  /** RegularExpression Id. */
  int BLOCK = 113;
  /** RegularExpression Id. */
  int ELSEIF = 114;
  /** RegularExpression Id. */
  int IN = 115;
  /** RegularExpression Id. */
  int PURE = 116;
  /** RegularExpression Id. */
  int IMPURE = 117;
  /** RegularExpression Id. */
  int LOGEVENT1 = 118;
  /** RegularExpression Id. */
  int LOGEVENT2 = 119;
  /** RegularExpression Id. */
  int LOGEVENT3 = 120;
  /** RegularExpression Id. */
  int LOGEVENT4 = 121;
  /** RegularExpression Id. */
  int LOGEVENT5 = 122;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 123;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 124;
  /** RegularExpression Id. */
  int HEX_LITERAL = 125;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 126;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 127;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 128;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 129;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 130;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 131;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 132;
  /** RegularExpression Id. */
  int STRING_LITERAL = 133;
  /** RegularExpression Id. */
  int IDENTIFIER = 134;
  /** RegularExpression Id. */
  int LETTER = 135;
  /** RegularExpression Id. */
  int PART_LETTER = 136;
  /** RegularExpression Id. */
  int LPAREN = 137;
  /** RegularExpression Id. */
  int RPAREN = 138;
  /** RegularExpression Id. */
  int LBRACE = 139;
  /** RegularExpression Id. */
  int RBRACE = 140;
  /** RegularExpression Id. */
  int LBRACKET = 141;
  /** RegularExpression Id. */
  int RBRACKET = 142;
  /** RegularExpression Id. */
  int SEMICOLON = 143;
  /** RegularExpression Id. */
  int COMMA = 144;
  /** RegularExpression Id. */
  int DOT = 145;
  /** RegularExpression Id. */
  int AT = 146;
  /** RegularExpression Id. */
  int GUILLEMETDOUBLE = 147;
  /** RegularExpression Id. */
  int GUILLEMETSIMPLE = 148;
  /** RegularExpression Id. */
  int BACKSLASH = 149;
  /** RegularExpression Id. */
  int ASSIGN = 150;
  /** RegularExpression Id. */
  int LT = 151;
  /** RegularExpression Id. */
  int BANG = 152;
  /** RegularExpression Id. */
  int TILDE = 153;
  /** RegularExpression Id. */
  int HOOK = 154;
  /** RegularExpression Id. */
  int COLON = 155;
  /** RegularExpression Id. */
  int EQ = 156;
  /** RegularExpression Id. */
  int LE = 157;
  /** RegularExpression Id. */
  int GE = 158;
  /** RegularExpression Id. */
  int NE = 159;
  /** RegularExpression Id. */
  int SC_OR = 160;
  /** RegularExpression Id. */
  int SC_AND = 161;
  /** RegularExpression Id. */
  int INCR = 162;
  /** RegularExpression Id. */
  int DECR = 163;
  /** RegularExpression Id. */
  int PLUS = 164;
  /** RegularExpression Id. */
  int MINUS = 165;
  /** RegularExpression Id. */
  int STAR = 166;
  /** RegularExpression Id. */
  int SLASH = 167;
  /** RegularExpression Id. */
  int BIT_AND = 168;
  /** RegularExpression Id. */
  int BIT_OR = 169;
  /** RegularExpression Id. */
  int XOR = 170;
  /** RegularExpression Id. */
  int REM = 171;
  /** RegularExpression Id. */
  int LSHIFT = 172;
  /** RegularExpression Id. */
  int PLUSASSIGN = 173;
  /** RegularExpression Id. */
  int MINUSASSIGN = 174;
  /** RegularExpression Id. */
  int STARASSIGN = 175;
  /** RegularExpression Id. */
  int SLASHASSIGN = 176;
  /** RegularExpression Id. */
  int ANDASSIGN = 177;
  /** RegularExpression Id. */
  int ORASSIGN = 178;
  /** RegularExpression Id. */
  int XORASSIGN = 179;
  /** RegularExpression Id. */
  int REMASSIGN = 180;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 181;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 182;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 183;
  /** RegularExpression Id. */
  int ELLIPSIS = 184;
  /** RegularExpression Id. */
  int GT = 185;
  /** RegularExpression Id. */
  int DIFFGIT = 186;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<token of kind 2>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 7>",
    "\"abstract\"",
    "\"assert\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"strictfp\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"within\"",
    "\"encapsulated\"",
    "\"function\"",
    "\"input\"",
    "\"end\"",
    "\"external\"",
    "\"parameter\"",
    "\"equation\"",
    "\"String\"",
    "\"Real\"",
    "\"Boolean\"",
    "\"enumeration\"",
    "\"type\"",
    "\"then\"",
    "\"when\"",
    "\"elsewhen\"",
    "\"or\"",
    "\"and\"",
    "\"model\"",
    "\"redeclare\"",
    "\"constant\"",
    "\"Complex\"",
    "\"noEvent\"",
    "\"pre\"",
    "\"logEvent\"",
    "\"conj\"",
    "\"real\"",
    "\"imag\"",
    "\"sin\"",
    "\"cos\"",
    "\"tan\"",
    "\"atan\"",
    "\"connector\"",
    "\"Icon\"",
    "\"Rectangle\"",
    "\"Integer\"",
    "\"record\"",
    "\"discrete\"",
    "\"algorithm\"",
    "\"constrainedby\"",
    "\"expandable\"",
    "\"flow\"",
    "\"initial\"",
    "\"not\"",
    "\"der\"",
    "\"inner\"",
    "\"partial\"",
    "\"replaceable\"",
    "\"annotation\"",
    "\"connect\"",
    "\"outer\"",
    "\"output\"",
    "\"block\"",
    "\"elseif\"",
    "\"in\"",
    "\"pure\"",
    "\"impure\"",
    "\"logEvent1\"",
    "\"logEvent2\"",
    "\"logEvent3\"",
    "\"logEvent4\"",
    "\"logEvent5\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"\\\"\"",
    "\"\\\'\"",
    "\"\\\\\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"...\"",
    "\">\"",
    "\">>>>>>> #\"",
  };

}
